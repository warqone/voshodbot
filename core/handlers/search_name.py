import logging
from typing import List, Dict, Any

from aiogram import Bot, Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from handlers.constants import (
    MIN_SEARCH_QUERY_LENGTH, ITEMS_PER_PAGE, PHOTO_URL)
from handlers.start import get_main_menu
from keyboards.start_kb import back_to_main_menu_button
from utils.requests import request_search_name


search_name_router = Router()
logger = logging.getLogger(__name__)


class SearchForm(StatesGroup):
    get_name = State()


class ProductListManager:
    @staticmethod
    async def send_search_prompt(message: Message) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏."""
        await message.answer(
            "<b>–î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏.</b>\n"
            "<i>–ü—Ä–∏–º–µ—Ä: \n- –º–∞—Å–ª—è–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä VW Polo\n- –≤–æ–∑–¥—É—à–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä "
            "vesta</i>",
            reply_markup=back_to_main_menu_button()
        )

    @staticmethod
    def validate_search_query(query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∑–∞–ø—Ä–æ—Å–∞."""
        return len(query) >= MIN_SEARCH_QUERY_LENGTH

    @staticmethod
    async def process_search_results(
        message: Message,
        search_query: str,
        state: FSMContext,
        bot: Bot,
        user_api_token: str
    ) -> None:
        """–ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∞."""
        try:
            data = await request_search_name(search_query, user_api_token)
            if not data or not data.get('response', {}).get('items'):
                await message.reply(
                    "<b>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.</b>",
                    reply_markup=back_to_main_menu_button()
                )
                return

            products = data['response']['items']
            await ProductListManager.display_product_page(
                message=message,
                products=products,
                page_number=0,
                state=state,
                bot=bot
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {e}", exc_info=True)
            await state.clear()
            await message.answer(
                "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</b>",
                reply_markup=back_to_main_menu_button()
            )

    @staticmethod
    async def display_product_page(
        message: Message,
        products: List[Dict[str, Any]],
        page_number: int,
        state: FSMContext,
        bot: Bot
    ) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        await state.update_data(products=products, current_page=page_number)

        start_idx = page_number * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        page_products = products[start_idx:end_idx]

        message_text = ProductListManager._build_message_text(
            page_products, page_number)
        keyboard = ProductListManager._build_keyboard(
            page_products, page_number, len(products))

        try:
            await message.edit_text(message_text, reply_markup=keyboard)
        except Exception:
            await message.answer(message_text, reply_markup=keyboard)

    @staticmethod
    def _build_message_text(
            products: List[Dict[str, Any]], page_number: int) -> str:
        """–°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–∞–º–∏."""
        message_lines = [
            f"<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number + 1}\n"
        ]

        for product in products:
            message_lines.extend([
                f"üì¶ <b>{product['name']}</b>",
                f"üè¢ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</b> {product['oem_brand']}",
                f"üî¢ <b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product['oem_num']}",
                f"üè∑Ô∏è <b>–¶–µ–Ω–∞:</b> {product['price']} —Ä—É–±.",
                f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:</b> {product['count']}"
                f" {product['unit']}\n"
            ])

        return "\n".join(message_lines)

    @staticmethod
    def _build_keyboard(
        products: List[Dict[str, Any]],
        current_page: int,
        total_products: int
    ) -> InlineKeyboardBuilder:
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
        kb = InlineKeyboardBuilder()

        for product in products:
            kb.button(
                text=f"{product['oem_num']} ({product['price']} —Ä—É–±.)",
                callback_data=f"detail_{product['mog']}"
            )

        navigation_buttons = []
        if current_page > 0:
            navigation_buttons.append(("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", "prev_page"))

        if (current_page + 1) * ITEMS_PER_PAGE < total_products:
            navigation_buttons.append(("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è", "next_page"))
        navigation_buttons.append(("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"))
        for text, callback_data in navigation_buttons:
            kb.button(text=text, callback_data=callback_data)

        kb.adjust(1)
        return kb.as_markup()

    @staticmethod
    async def get_product_details(
            mog: str, state: FSMContext) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        data = await state.get_data()
        products = data.get("products", [])

        for product in products:
            if product.get('mog') == mog:
                return product

        return {}

    @staticmethod
    async def send_product_details(
        message: Message,
        product: Dict[str, Any],
        state: FSMContext
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ —Å —Ñ–æ—Ç–æ."""
        try:
            await message.delete()

            text = (
                f"üì¶ <b>{product.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
                f"üè¢ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</b> {product.get('oem_brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üî¢ <b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product.get('oem_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üè∑Ô∏è <b>–¶–µ–Ω–∞:</b> {product.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
                f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:</b> {product.get('count', 0)} "
                f"{product.get('unit', '—à—Ç')}\n"
                "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –ß–µ–ª—è–±–∏–Ω—Å–∫–∞:</b> "
                f"{product.get('count_chel', 0)} {product.get('unit', '—à—Ç')}\n"
                "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞:</b> "
                f"{product.get('count_ekb', 0)} {product.get('unit', '—à—Ç')}\n"
            )

            kb = InlineKeyboardBuilder()
            kb.button(
                text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É",
                callback_data="back_to_list"
            )
            kb.button(
                text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_basket_{product['mog']}"
            )
            kb.adjust(1)

            if product.get('images') and len(product['images']) > 0:
                await message.answer_photo(
                    photo=(PHOTO_URL + product['images'][0]),
                    caption=text,
                    reply_markup=kb.as_markup()
                )
            else:
                await message.answer(
                    text=text,
                    reply_markup=kb.as_markup()
                )

        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞: {e}", exc_info=True)
            await message.answer(
                "<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞.</b>",
                reply_markup=back_to_main_menu_button()
            )


@search_name_router.callback_query(F.data == "search_name")
async def handle_search_name(call: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–∏"""
    await call.message.delete()
    await ProductListManager.send_search_prompt(call.message)
    await state.set_state(SearchForm.get_name)


@search_name_router.message(StateFilter(SearchForm.get_name))
async def handle_search_query(
        message: Message,
        state: FSMContext,
        bot: Bot,
        user_api_token: str) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é"""
    if not ProductListManager.validate_search_query(message.text):
        await message.answer("<b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏.</b>")
        return

    await message.answer(
        f"<b>–ü–æ–∏—Å–∫ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é: {message.text}...</b>")
    await ProductListManager.process_search_results(
        message, message.text, state, bot, user_api_token)


@search_name_router.callback_query(F.data.in_(["prev_page", "next_page"]))
async def handle_pagination(
        call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    data = await state.get_data()
    products = data.get("products", [])
    current_page = data.get("current_page", 0)

    if call.data == "prev_page" and current_page > 0:
        current_page -= 1
    elif call.data == "next_page" and (
            current_page + 1) * ITEMS_PER_PAGE < len(products):
        current_page += 1

    await call.answer()
    await ProductListManager.display_product_page(
        message=call.message,
        products=products,
        page_number=current_page,
        state=state,
        bot=bot
    )


@search_name_router.callback_query(F.data.startswith("detail_"))
async def handle_product_detail(
        call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—á–∞—Å—Ç–∏"""
    await call.answer()
    mog = call.data.split("_")[1]

    current_state = await state.get_data()
    await state.update_data(previous_state=current_state)

    product = await ProductListManager.get_product_details(mog, state)

    if not product:
        await call.message.answer(
            "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.</b>",
            reply_markup=back_to_main_menu_button()
        )
        return

    await ProductListManager.send_product_details(call.message, product, state)


@search_name_router.callback_query(F.data == "back_to_list")
async def handle_back_to_list(
    call: CallbackQuery,
    state: FSMContext,
    bot: Bot
) -> None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤."""
    data = await state.get_data()
    previous_state = data.get("previous_state", {})

    if not previous_state:
        await call.message.answer(
            "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤.</b>",
            reply_markup=back_to_main_menu_button()
        )
        return

    products = previous_state.get("products", [])
    current_page = previous_state.get("current_page", 0)

    await call.message.delete()
    await ProductListManager.display_product_page(
        message=call.message,
        products=products,
        page_number=current_page,
        state=state,
        bot=bot
    )


@search_name_router.callback_query(F.data == 'back_to_main')
async def handle_back_to_main_from_search(
        call: CallbackQuery, bot: Bot, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await state.clear()
    await get_main_menu(call.from_user.id, bot)
