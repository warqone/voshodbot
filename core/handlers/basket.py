import logging
from typing import Dict, List

from aiogram import Router, F
from aiogram.types import CallbackQuery

from handlers.constants import BASKET_INFO, BASKET
from keyboards.start_kb import back_to_main_menu_button
from keyboards.basket_kb import basket_main_keyboard
from utils.requests import get_request, request_basket_delete

logger = logging.getLogger(__name__)
basket_router = Router()


class BasketManager:
    @staticmethod
    async def show_basket(call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            data = await get_request(BASKET)
            items = data['items']
            if len(items) == 0:
                await call.answer(
                    text='üóë –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.',
                    show_alert=True
                )
                return
            basket_info = await get_request(BASKET_INFO)
            total_price = basket_info['basket']['total_price']
            count = basket_info['basket']['count']
            message = await BasketManager.format_basket_message(items)
            message += (
                f'\n\n<b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {count}\n'
                f'<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_price} —Ä—É–±.')
            await call.message.edit_text(
                message,
                reply_markup=basket_main_keyboard()
            )

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}', exc_info=True)
            await call.message.answer(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                reply_markup=back_to_main_menu_button()
            )

    @staticmethod
    async def format_basket_message(items: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã"""
        message = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"

        for item in items:
            name = item['name']
            count = item['count']
            unit = item['unit']
            oem_brand = item['oem_brand']
            price = item['price']
            available = (
                "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if item['available'] else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

            message += (
                f"<b>{name}</b>\n"
                f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {oem_brand}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} {unit}\n"
                f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                f"–°—Ç–∞—Ç—É—Å: {available}\n\n"
            )
        return message

    @staticmethod
    async def clear_basket(call: CallbackQuery) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            await request_basket_delete()
            await call.message.edit_text(
                "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
                reply_markup=back_to_main_menu_button()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
            await call.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã",
                reply_markup=back_to_main_menu_button()
            )


@basket_router.callback_query(F.data == 'basket')
async def handle_basket(call: CallbackQuery):
    await BasketManager.show_basket(call)


@basket_router.callback_query(F.data == 'clear_basket')
async def handle_clear(call: CallbackQuery):
    await BasketManager.clear_basket(call)
