import logging
from typing import Dict, List

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from handlers.constants import BASKET_INFO, BASKET, ITEMS_PER_PAGE
from keyboards.start_kb import back_to_main_menu_button
from keyboards.basket_kb import (
    basket_main_keyboard, basket_edit_keyboard, back_to_basket_button,
    choose_outlets_keyboard, confirm_basket)
from utils.requests import (
    get_request, request_basket_delete, request_add_to_basket,
    get_outlets_info, create_order)

logger = logging.getLogger(__name__)
basket_router = Router()


class BasketEdit(StatesGroup):
    edit = State()


@basket_router.callback_query(F.data.startswith('add_to_basket_'))
async def add_to_basket(call: CallbackQuery,
                        user_api_token: str) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        await request_add_to_basket(call.data.split('_')[3], user_api_token)
        await call.answer(
            text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ '
            '–∫–æ—Ä–∑–∏–Ω–µ', show_alert=True
        )
    except Exception as e:
        logger.error(e)


class BasketManager:
    @staticmethod
    async def show_basket(call: CallbackQuery, user_api_token: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã"""
        await BasketManager.show_basket_page(call, user_api_token, page=0)

    @staticmethod
    async def show_basket_page(call: CallbackQuery,
                               user_api_token: str,
                               page: int = 0):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ—Ä–∑–∏–Ω—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            data = await get_request(BASKET, user_api_token)
            items = data.get('items', [])

            if not items:
                await call.answer(
                    text='üóë –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.',
                    show_alert=True
                )
                return

            basket_info = await get_request(BASKET_INFO, user_api_token)
            total_price = basket_info['basket']['total_price']
            count = basket_info['basket']['count']

            total_pages = (len(items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
            page_items = items[page * ITEMS_PER_PAGE: (page+1)*ITEMS_PER_PAGE]

            message = await BasketManager.format_basket_message(page_items)
            message += (
                f'\n<b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1} –∏–∑ {total_pages}</b>\n'
                f'<b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {count}\n'
                f'<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_price} —Ä—É–±.')

            kb = InlineKeyboardBuilder()

            main_buttons = basket_main_keyboard().inline_keyboard
            for row in main_buttons:
                kb.row(*row)

            pagination_buttons = []
            if page > 0:
                pagination_buttons.append(
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
                        callback_data=f"basket_page_{page-1}"
                    )
                )
            if (page+1)*ITEMS_PER_PAGE < len(items):
                pagination_buttons.append(
                    InlineKeyboardButton(
                        text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è",
                        callback_data=f"basket_page_{page+1}"
                    )
                )

            if pagination_buttons:
                kb.row(*pagination_buttons)

            await call.message.edit_text(
                message,
                reply_markup=kb.as_markup()
            )

        except Exception as e:
            logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}')
            await call.answer(
                text='‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã',
                show_alert=True
            )

    @staticmethod
    async def format_basket_message(items: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã"""
        message = "<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"

        for item in items:
            name = item['name']
            count = item['count']
            unit = item['unit']
            oem_brand = item['oem_brand']
            price = item['price']
            available = (
                "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if item['available'] else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏")

            message += (
                f"üì¶ <b>{name}</b>\n"
                f"üè¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {oem_brand}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} {unit}\n"
                f"üè∑Ô∏è –¶–µ–Ω–∞: {price} —Ä—É–±.\n"
                f"{available}\n\n"
            )
        return message

    @staticmethod
    async def edit_basket(call: CallbackQuery,
                          user_api_token: str,
                          state: FSMContext):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            data = await get_request(BASKET, user_api_token)
            items = data.get('items')
            kb = InlineKeyboardBuilder()
            await state.update_data(basket=items)
            for item in items:
                item_name = item.get('name')
                item_mog = item.get('mog')
                kb.button(
                    text=item_name, callback_data=f'basket_edit_{item_mog}')
            kb.button(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='basket')
            kb.adjust(1)
            await call.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=kb.as_markup()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: {e}")
            await call.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã",
                reply_markup=back_to_main_menu_button()
            )

    @staticmethod
    async def clear_basket(call: CallbackQuery, user_api_token: str):
        """–û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
        try:
            await request_basket_delete(user_api_token)
            await call.message.edit_text(
                "üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.",
                reply_markup=back_to_main_menu_button()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
            await call.message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã",
                reply_markup=back_to_main_menu_button()
            )


@basket_router.callback_query(F.data == 'basket')
async def handle_basket(call: CallbackQuery, user_api_token: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã"""
    await BasketManager.show_basket(call, user_api_token)


@basket_router.callback_query(F.data == 'clear_basket')
async def handle_clear(call: CallbackQuery, user_api_token: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    await BasketManager.clear_basket(call, user_api_token)


@basket_router.callback_query(F.data == 'edit_basket')
async def handle_edit(call: CallbackQuery,
                      user_api_token: str,
                      state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
    await BasketManager.edit_basket(call, user_api_token, state)


@basket_router.callback_query(F.data.startswith('basket_page_'))
async def handle_basket_pagination(call: CallbackQuery, user_api_token: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    page = int(call.data.split('_')[-1])
    await BasketManager.show_basket_page(call, user_api_token, page)


@basket_router.callback_query(F.data.startswith('basket_edit_'))
async def handle_basket_edit(call: CallbackQuery,
                             user_api_token: str,
                             state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    mog = call.data.split('_')[-1]
    data = await state.get_data()
    basket = data.get('basket')
    choosed_item = next(
        (item for item in basket if item.get('mog') == mog), None)
    await state.update_data(choosed_item=choosed_item)
    await call.message.edit_text(
        f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{choosed_item.get("name")}</b>',
        reply_markup=basket_edit_keyboard()
    )


@basket_router.callback_query(F.data == 'edit_quantity')
async def handle_edit_quantity(call: CallbackQuery,
                               user_api_token: str,
                               state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    data = await state.get_data()
    choosed_item = data.get('choosed_item')
    await call.message.edit_text(
        f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞: <b>{choosed_item.get("name")}</b>'
        '\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ:',
        reply_markup=back_to_basket_button()
    )
    await state.set_state(BasketEdit.edit)


@basket_router.message(StateFilter(BasketEdit.edit))
async def handle_edit_quantity_message(message: Message,
                                       user_api_token: str,
                                       state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
    except ValueError:
        await message.answer(
            '‚ùó <b>–û—à–∏–±–∫–∞!</b>\n'
            '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è\n\n'
            '–ü—Ä–∏–º–µ—Ä: <code>5</code>'
        )
        return

    data = await state.get_data()
    choosed_item = data.get('choosed_item')
    await state.clear()

    try:
        await request_add_to_basket(
            choosed_item.get('mog'), user_api_token, quantity)
        await message.answer(
            f'‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ <b>{choosed_item.get("name")}</b> '
            f'–∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {quantity}',
            reply_markup=back_to_basket_button()
        )
    except Exception:
        await message.answer(
            '‚ùó <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞</b>'
        )


@basket_router.callback_query(F.data == 'delete_item')
async def handle_back_to_basket(call: CallbackQuery,
                                user_api_token: str,
                                state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    data = await state.get_data()
    choosed_item = data.get('choosed_item')
    await state.clear()

    try:
        await request_add_to_basket(
            choosed_item.get('mog'), user_api_token, quantity=0)
        await call.answer(
            '‚ùå –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
            show_alert=True
        )
    except Exception:
        await call.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã',
            show_alert=True
        )


@basket_router.callback_query(F.data == 'checkout_basket')
async def handle_checkout_basket(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    await call.message.edit_text(
        '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:</b>',
        reply_markup=choose_outlets_keyboard()
    )


@basket_router.callback_query(F.data.in_({'basket_va', 'basket_co'}))
async def handle_choose_basket(call: CallbackQuery,
                               user_api_token: str,
                               state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    delivery_type = call.data.split('_')[-1]
    if call.data == 'basket_va':
        message = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:</b>'
    else:
        message = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:</b>'
    await state.update_data(delivery_type=delivery_type)
    response = await get_outlets_info(user_api_token)
    outlets = [
        out for out in response if out.get('type') == delivery_type
    ]
    if not outlets:
        return await call.answer(
            '–°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ø—É—Å—Ç.',
            show_alert=True
        )
    kb = InlineKeyboardBuilder()
    addresses = {}
    for outlet in outlets:
        address = outlet.get('name')
        id = outlet.get('id')
        addresses[id] = address
        kb.button(text=outlet.get('name'),
                  callback_data=f'basket_outlet_{outlet.get("id")}')
    kb.button(text='üõí –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É', callback_data='basket')
    kb.adjust(1)
    await state.update_data(addresses=addresses)
    await call.message.edit_text(
        message,
        reply_markup=kb.as_markup())


@basket_router.callback_query(F.data.startswith('basket_outlet_'))
async def handle_choose_outlet(call: CallbackQuery,
                               user_api_token: str,
                               state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
    outlet_id = call.data.split('_')[-1]
    await state.update_data(outlet_id=outlet_id)
    data = await state.get_data()
    addresses = data.get('addresses')
    address = addresses[outlet_id]
    delivery_type = data.get('delivery_type')
    if delivery_type == 'va':
        message = f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:</b>\n{address}\n\n'
    else:
        message = f'<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ—á–∫—É –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n{address}\n\n'
    message += '<b>–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑".</b>'
    await call.message.edit_text(
        message, reply_markup=confirm_basket()
    )


@basket_router.callback_query(F.data == 'confirm_basket')
async def handle_confirm_basket(call: CallbackQuery,
                                user_api_token: str,
                                state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    data = await state.get_data()
    outlet_id = data.get('outlet_id')
    response = await create_order(user_api_token, outlet_id)
    response = response.get('response')
    order = response.get('order')
    if not order:
        return await call.answer(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.',
            show_alert=True
        )
    order_id = order.get('uid', '')
    amount = order.get('amount', 0)
    addresses = data.get('addresses')
    delivery_address = addresses[outlet_id]
    await call.answer(
        f'–ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω.',
        show_alert=True
    )
    await call.message.edit_text(
        f'<b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n#Ô∏è‚É£ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order_id}\n'
        f'<b>üõí –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {amount}\n'
        f'<b>üöñ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_address}',
        reply_markup=back_to_main_menu_button()
    )
    await state.clear()
