from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.constants import MIN_SEARCH_QUERY_LENGTH
from keyboards.start_kb import back_to_main_menu_button
from utils.requests import request_search_cross


class SearchCross(StatesGroup):
    search_cross = State()
    search_cross_brand = State()


search_cross_router = Router()


@search_cross_router.callback_query(F.data == "search_cross")
async def search_cross(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É."""
    await call.message.edit_text(
        '<b>–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª.</b>\n'
        '<i>–ü—Ä–∏–º–µ—Ä:\nGB123\nGB-102M</i>',
        reply_markup=back_to_main_menu_button()
    )
    await state.set_state(SearchCross.search_cross)


@search_cross_router.message(StateFilter(SearchCross.search_cross))
async def search_cross_brand(message: Message,
                             state: FSMContext,
                             user_api_token: str):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (—É—Ç–æ—á–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞)."""
    if len(message.text) < MIN_SEARCH_QUERY_LENGTH:
        await message.answer(
            '<b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä—Ç–∏–∫—É–ª.</b>'
        )
        return
    await message.answer(
        f'<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: {message.text}</b>'
    )
    try:
        response = await request_search_cross(message.text, user_api_token)
        brands = response.get('brands')
        if brands:
            await state.update_data(article=message.text)
            kb = InlineKeyboardBuilder()
            for brand in brands:
                name_of_brand = brand.get('brand')
                kb.button(
                    text=name_of_brand,
                    callback_data=f'cross_detail_{name_of_brand}'
                )
            kb.adjust(2)
            await message.answer(
                '<b>–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:</b>',
                reply_markup=kb.as_markup()
            )
        else:
            await message.answer(
                '<b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª.',
                reply_markup=back_to_main_menu_button()
            )
    except Exception:
        await message.answer(
            '<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.</b>'
        )


@search_cross_router.callback_query(F.data.startswith('cross_detail_'))
async def cross_detail(call: CallbackQuery,
                       state: FSMContext,
                       user_api_token: str):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (–ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞)."""
    await call.message.delete()
    data = await state.get_data()
    article = data.get('article')
    brand = call.data.split('_')[2]
    response = await request_search_cross(
        article, user_api_token, brand
    )
    target = response.get('target', [])
    items = response.get('items', [])
    image = ''
    kb = InlineKeyboardBuilder()
    if items:
        await state.update_data(analogs=items)
        kb.button(text='üí¨ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏', callback_data='show_analogs')
    if target:
        target = target[0]
        image = target.get('images')[0]
        message = (
            f"üì¶ <b>{target.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
            f"üè¢ <b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å:</b> {target.get('oem_brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üî¢ <b>–ê—Ä—Ç–∏–∫—É–ª:</b> {target.get('oem_num', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üè∑Ô∏è <b>–¶–µ–Ω–∞:</b> {target.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
            f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:</b> {target.get('count', 0)} "
            f"{target.get('unit', '—à—Ç')}\n"
            "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –ß–µ–ª—è–±–∏–Ω—Å–∫–∞:</b> "
            f"{target.get('count_chel', 0)} {target.get('unit', '—à—Ç')}\n"
            "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞:</b> "
            f"{target.get('count_ekb', 0)} {target.get('unit', '—à—Ç')}\n"
        )
        if target.get('count') > 0:
            kb.button(
                text='üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                callback_data=f'add_to_basket_{target.get("mog")}')
    else:
        message = '<b>–¢–æ–≤–∞—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –±—Ä–µ–Ω–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>'
    kb.button(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    kb.adjust(1)
    if image:
        try:
            await call.message.answer_photo(
                image,
                caption=message,
                reply_markup=kb.as_markup()
            )
        except Exception:
            await call.message.answer(
                f'–§–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å\n\n{message}',
                reply_markup=kb.as_markup()
            )
    else:
        await call.message.answer(
            message,
            reply_markup=kb.as_markup()
        )


@search_cross_router.callback_query(F.data == 'show_analogs')
async def show_analogs(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏."""
    await call.message.delete()
    data = await state.get_data()
    analogs = data.get('analogs', [])
    if analogs:
        avalaible_analogs = [
            analog for analog in analogs if analog.get('count') > 0
        ]
        kb = InlineKeyboardBuilder()
        message = '<b>–ê–Ω–∞–ª–æ–≥–∏:</b>\n'
        if avalaible_analogs:
            for analog in avalaible_analogs:
                message += (f'{analog.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")}\n'
                            f'{analog.get("price", "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")} —Ä—É–±.\n'
                            f'{analog.get("count", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")} '
                            f'{analog.get("unit", "—à—Ç")}'
                )
                kb.button(
                    text=analog.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
                    callback_data=f'cross_detail_{analog.get("mog")}'
                )
                kb.adjust(1)
            await call.message.answer(
                '<b>–ê–Ω–∞–ª–æ–≥–∏:</b>\n',
                reply_markup=kb.as_markup()
            )
    else:
        await call.message.answer(
            '<b>–ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>',
            reply_markup=back_to_main_menu_button()
        )
        return
    # kb = InlineKeyboardBuilder()
    # for analog in analogs:
    #     kb.button(
    #         text=analog.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'),
    #         callback_data=f'cross_detail_{analog.get("mog")}'
    #     )
