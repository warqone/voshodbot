from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton

from handlers.constants import ITEMS_PER_PAGE, MIN_SEARCH_QUERY_LENGTH
from keyboards.start_kb import back_to_main_menu_button
from utils.requests import request_search_cross
from utils.utils import formatting_items


class SearchCross(StatesGroup):
    search_cross = State()
    search_cross_brand = State()


search_cross_router = Router()


@search_cross_router.callback_query(F.data == "search_cross")
async def search_cross(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É."""
    await call.message.edit_text(
        '<b>–î–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª.</b>\n'
        '<i>–ü—Ä–∏–º–µ—Ä:\n-C25011\n-K015670XS</i>',
        reply_markup=back_to_main_menu_button()
    )
    await state.set_state(SearchCross.search_cross)


@search_cross_router.message(StateFilter(SearchCross.search_cross))
async def search_cross_brand(message: Message,
                             state: FSMContext,
                             user_api_token: str):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (—É—Ç–æ—á–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞)."""
    if len(message.text) < MIN_SEARCH_QUERY_LENGTH:
        await message.answer(
            '<b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞—Ä—Ç–∏–∫—É–ª.</b>'
        )
        return
    await message.answer(
        f'<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: {message.text}</b>'
    )
    try:
        response = await request_search_cross(message.text, user_api_token)
        brands = response.get('brands')
        if brands:
            kb = InlineKeyboardBuilder()
            for brand in brands:
                name_of_brand = brand.get('brand')
                article = brand.get('oem')
                if article:
                    callback_data = f'cross_detail_{name_of_brand}_{article}'
                else:
                    callback_data = f'cross_detail_{name_of_brand}_{article}'
                kb.button(
                    text=name_of_brand,
                    callback_data=callback_data
                )
            kb.adjust(2)
            await message.answer(
                '<b>–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è:</b>',
                reply_markup=kb.as_markup()
            )
        else:
            await message.answer(
                '<b>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞—Ä—Ç–∏–∫—É–ª.',
                reply_markup=back_to_main_menu_button()
            )
    except Exception:
        await message.answer(
            '<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.</b>'
        )


@search_cross_router.callback_query(F.data.startswith('cross_detail_'))
async def cross_detail(call: CallbackQuery,
                       state: FSMContext,
                       user_api_token: str):
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (–ø–æ—Å–ª–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞)."""
    await call.message.delete()
    brand = call.data.split('_')[2]
    article = call.data.split('_')[3]
    response = await request_search_cross(
        article, user_api_token, brand
    )
    target = response.get('target', [])
    items = response.get('items', [])
    image = ''
    kb = InlineKeyboardBuilder()
    if items:
        await state.update_data(analogs=items)
        kb.button(text='üí¨ –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏', callback_data='show_analogs')
    if target:
        target = target[0]
        image = target.get('images')[0]
        message = await formatting_items(target)
        if target.get('count') > 0:
            kb.button(
                text='üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É',
                callback_data=f'add_to_basket_{target.get("mog")}')
    else:
        message = '<b>–¢–æ–≤–∞—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏ –±—Ä–µ–Ω–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>'
    kb.button(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    kb.adjust(1)
    if image:
        try:
            await call.message.answer_photo(
                image,
                caption=message,
                reply_markup=kb.as_markup()
            )
        except Exception:
            await call.message.answer(
                f'–§–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å\n\n{message}',
                reply_markup=kb.as_markup()
            )
    else:
        await call.message.answer(
            message,
            reply_markup=kb.as_markup()
        )


@search_cross_router.callback_query(F.data == 'show_analogs')
async def show_analogs(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)."""
    await call.message.delete()
    data = await state.get_data()
    analogs = data.get('analogs', [])

    avalaible_analogs = [
        analog for analog in analogs if analog.get('count') > 0]

    if not avalaible_analogs:

        try:
            await call.message.delete()
        except Exception:
            pass
        await call.message.answer(
            '<b>–ê–Ω–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</b>',
            reply_markup=back_to_main_menu_button()
        )
        return

    sent_message = await call.message.answer(
        '<b>–ó–∞–≥—Ä—É–∂–∞—é –∞–Ω–∞–ª–æ–≥–∏...</b>'
    )

    await show_analogs_page(sent_message, avalaible_analogs, page=0)


async def show_analogs_page(message, analogs, page=0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–Ω–∞–ª–æ–≥–∞–º–∏."""
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_items = analogs[start_idx:end_idx]

    kb = InlineKeyboardBuilder()

    message_text = '<b>–ê–Ω–∞–ª–æ–≥–∏:</b>\n\n'
    for idx, analog in enumerate(page_items, start=start_idx + 1):
        message_text += await formatting_items(analog)
        article = analog.get('oem_num', '–ù–µ —É–∫–∞–∑–∞–Ω')
        price = analog.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        brand = analog.get('oem_brand', '–ù–µ —É–∫–∞–∑–∞–Ω')
        kb.button(
            text=(
                f"{article} "
                f"({price}) —Ä—É–±."
            ), callback_data=f"cross_detail_{brand}_{article}"
        )
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
            callback_data=f"analogs_page_{page - 1}"
        ))
    if end_idx < len(analogs):
        pagination_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚û°Ô∏è",
            callback_data=f"analogs_page_{page + 1}"
        ))

    if pagination_buttons:
        kb.row(*pagination_buttons)
    kb.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main')
    kb.adjust(1)

    await message.edit_text(
        message_text,
        reply_markup=kb.as_markup()
    )


@search_cross_router.callback_query(F.data.startswith('analogs_page_'))
async def handle_analogs_pagination(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∞–Ω–∞–ª–æ–≥–∞–º–∏."""
    await call.answer()
    page = int(call.data.split('_')[-1])

    data = await state.get_data()
    analogs = data.get('analogs', [])
    avalaible_analogs = [
        analog for analog in analogs if analog.get('count') > 0]

    await show_analogs_page(call.message, avalaible_analogs, page)
